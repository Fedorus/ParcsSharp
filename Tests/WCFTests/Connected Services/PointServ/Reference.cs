//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFTests.PointServ {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Channel", Namespace="http://schemas.datacontract.org/2004/07/Parcs")]
    [System.SerializableAttribute()]
    public partial class Channel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid PointIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFTests.PointServ.ChannelType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IP {
            get {
                return this.IPField;
            }
            set {
                if ((object.ReferenceEquals(this.IPField, value) != true)) {
                    this.IPField = value;
                    this.RaisePropertyChanged("IP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PointID {
            get {
                return this.PointIDField;
            }
            set {
                if ((this.PointIDField.Equals(value) != true)) {
                    this.PointIDField = value;
                    this.RaisePropertyChanged("PointID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFTests.PointServ.ChannelType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChannelType", Namespace="http://schemas.datacontract.org/2004/07/Parcs")]
    public enum ChannelType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Any = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TCP = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NamedPipe = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PointStartInfo", Namespace="http://schemas.datacontract.org/2004/07/Parcs")]
    [System.SerializableAttribute()]
    public partial class PointStartInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssemblyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsStaticField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MethodNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NamespaceAndClassField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssemblyName {
            get {
                return this.AssemblyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AssemblyNameField, value) != true)) {
                    this.AssemblyNameField = value;
                    this.RaisePropertyChanged("AssemblyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsStatic {
            get {
                return this.IsStaticField;
            }
            set {
                if ((this.IsStaticField.Equals(value) != true)) {
                    this.IsStaticField = value;
                    this.RaisePropertyChanged("IsStatic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MethodName {
            get {
                return this.MethodNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MethodNameField, value) != true)) {
                    this.MethodNameField = value;
                    this.RaisePropertyChanged("MethodName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NamespaceAndClass {
            get {
                return this.NamespaceAndClassField;
            }
            set {
                if ((object.ReferenceEquals(this.NamespaceAndClassField, value) != true)) {
                    this.NamespaceAndClassField = value;
                    this.RaisePropertyChanged("NamespaceAndClass");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ControlSpace", Namespace="http://schemas.datacontract.org/2004/07/Parcs")]
    [System.SerializableAttribute()]
    public partial class ControlSpace : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<WCFTests.PointServ.Channel> ChannelsOnCurrentDaemonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFTests.PointServ.PointCreationManager CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> DaemonAdressesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<WCFTests.PointServ.Channel> ChannelsOnCurrentDaemon {
            get {
                return this.ChannelsOnCurrentDaemonField;
            }
            set {
                if ((object.ReferenceEquals(this.ChannelsOnCurrentDaemonField, value) != true)) {
                    this.ChannelsOnCurrentDaemonField = value;
                    this.RaisePropertyChanged("ChannelsOnCurrentDaemon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFTests.PointServ.PointCreationManager Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> DaemonAdresses {
            get {
                return this.DaemonAdressesField;
            }
            set {
                if ((object.ReferenceEquals(this.DaemonAdressesField, value) != true)) {
                    this.DaemonAdressesField = value;
                    this.RaisePropertyChanged("DaemonAdresses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PointCreationManager", Namespace="http://schemas.datacontract.org/2004/07/Parcs")]
    [System.SerializableAttribute()]
    public partial class PointCreationManager : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Random randField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Random rand {
            get {
                return this.randField;
            }
            set {
                if ((object.ReferenceEquals(this.randField, value) != true)) {
                    this.randField = value;
                    this.RaisePropertyChanged("rand");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PointServ.IPointService")]
    public interface IPointService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPointService/Start", ReplyAction="http://tempuri.org/IPointService/StartResponse")]
        bool Start(WCFTests.PointServ.Channel from, WCFTests.PointServ.Channel to, WCFTests.PointServ.PointStartInfo info, WCFTests.PointServ.ControlSpace space);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPointService/Start", ReplyAction="http://tempuri.org/IPointService/StartResponse")]
        System.Threading.Tasks.Task<bool> StartAsync(WCFTests.PointServ.Channel from, WCFTests.PointServ.Channel to, WCFTests.PointServ.PointStartInfo info, WCFTests.PointServ.ControlSpace space);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPointService/Send", ReplyAction="http://tempuri.org/IPointService/SendResponse")]
        bool Send(WCFTests.PointServ.Channel from, WCFTests.PointServ.Channel to, byte[] data, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPointService/Send", ReplyAction="http://tempuri.org/IPointService/SendResponse")]
        System.Threading.Tasks.Task<bool> SendAsync(WCFTests.PointServ.Channel from, WCFTests.PointServ.Channel to, byte[] data, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPointService/AddChannel", ReplyAction="http://tempuri.org/IPointService/AddChannelResponse")]
        bool AddChannel(WCFTests.PointServ.Channel to, WCFTests.PointServ.Channel channel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPointService/AddChannel", ReplyAction="http://tempuri.org/IPointService/AddChannelResponse")]
        System.Threading.Tasks.Task<bool> AddChannelAsync(WCFTests.PointServ.Channel to, WCFTests.PointServ.Channel channel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPointService/TestWork", ReplyAction="http://tempuri.org/IPointService/TestWorkResponse")]
        bool TestWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPointService/TestWork", ReplyAction="http://tempuri.org/IPointService/TestWorkResponse")]
        System.Threading.Tasks.Task<bool> TestWorkAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPointServiceChannel : WCFTests.PointServ.IPointService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PointServiceClient : System.ServiceModel.ClientBase<WCFTests.PointServ.IPointService>, WCFTests.PointServ.IPointService {
        
        public PointServiceClient() {
        }
        
        public PointServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PointServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PointServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PointServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Start(WCFTests.PointServ.Channel from, WCFTests.PointServ.Channel to, WCFTests.PointServ.PointStartInfo info, WCFTests.PointServ.ControlSpace space) {
            return base.Channel.Start(from, to, info, space);
        }
        
        public System.Threading.Tasks.Task<bool> StartAsync(WCFTests.PointServ.Channel from, WCFTests.PointServ.Channel to, WCFTests.PointServ.PointStartInfo info, WCFTests.PointServ.ControlSpace space) {
            return base.Channel.StartAsync(from, to, info, space);
        }
        
        public bool Send(WCFTests.PointServ.Channel from, WCFTests.PointServ.Channel to, byte[] data, string type) {
            return base.Channel.Send(from, to, data, type);
        }
        
        public System.Threading.Tasks.Task<bool> SendAsync(WCFTests.PointServ.Channel from, WCFTests.PointServ.Channel to, byte[] data, string type) {
            return base.Channel.SendAsync(from, to, data, type);
        }
        
        public bool AddChannel(WCFTests.PointServ.Channel to, WCFTests.PointServ.Channel channel) {
            return base.Channel.AddChannel(to, channel);
        }
        
        public System.Threading.Tasks.Task<bool> AddChannelAsync(WCFTests.PointServ.Channel to, WCFTests.PointServ.Channel channel) {
            return base.Channel.AddChannelAsync(to, channel);
        }
        
        public bool TestWork() {
            return base.Channel.TestWork();
        }
        
        public System.Threading.Tasks.Task<bool> TestWorkAsync() {
            return base.Channel.TestWorkAsync();
        }
    }
}
